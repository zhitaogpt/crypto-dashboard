name: Cache crypto data (no-key NVT)

on:
  schedule:
    - cron: "0 */4 * * *"   # 每 4 小时
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare folders
        run: mkdir -p data

      # ---------- 市场价格/市值（CoinGecko） ----------
      - name: Fetch CoinGecko markets
        run: |
          curl -fsSL --retry 5 --retry-delay 3 --retry-connrefused \
            "https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=bitcoin,ethereum,solana,binancecoin&precision=full" \
            > data/cg.json || echo "[]" > data/cg.json

      # ---------- TVL（你已完成①，这里保留：主源 v2/chains + jsDelivr 镜像兜底） ----------
      - name: Fetch DeFiLlama TVL (single call) + mirror fallback
        run: |
          set -e
          ok=0
          if curl -fsSL --retry 5 --retry-delay 3 --retry-connrefused -H "User-Agent: gh-actions-llama" \
               "https://api.llama.fi/v2/chains" > data/chains_all.json; then
            ok=1
          fi
          if [ $ok -eq 0 ]; then
            echo "primary failed, using jsDelivr mirror..."
            curl -fsSL --retry 5 --retry-delay 3 --retry-connrefused -H "User-Agent: gh-actions-llama" \
              "https://cdn.jsdelivr.net/gh/DefiLlama/defillama-datasets@master/chainTvls.json" \
              > data/chainTvls_mirror.json || echo "{}" > data/chainTvls_mirror.json
          fi

          python3 - << 'PY'
          import json, os
          name_map = {'bitcoin':'Bitcoin','ethereum':'Ethereum','solana':'Solana','bsc':'BSC'}
          tvl_map = {}
          if os.path.exists("data/chains_all.json"):
            try:
              arr = json.load(open("data/chains_all.json"))
              tvl_map = {c.get("name"): c.get("tvl") for c in arr if isinstance(c, dict)}
            except: pass
          if not tvl_map and os.path.exists("data/chainTvls_mirror.json"):
            try:
              m = json.load(open("data/chainTvls_mirror.json")) or {}
              for k,v in m.items():
                if isinstance(v, dict) and "tvl" in v: tvl_map[k] = v.get("tvl")
                elif isinstance(v,(int,float)): tvl_map[k] = v
            except: pass
          out = {
            "BTC": {"tvl": tvl_map.get(name_map["bitcoin"])},
            "ETH": {"tvl": tvl_map.get(name_map["ethereum"])},
            "SOL": {"tvl": tvl_map.get(name_map["solana"])},
            "BNB": {"tvl": tvl_map.get(name_map["bsc"])},
          }
          json.dump(out, open("data/tvl_from_sources.json","w"))
          print("wrote data/tvl_from_sources.json")
          PY

      # ---------- DAU / TX / Fees（主源：DeFiLlama；失败不掉线） ----------
      - name: Fetch DeFiLlama chain actives/tx/fees
        run: |
          fetch_one(){ # $1=chain $2=prefix
            base="https://api.llama.fi"
            curl -fsSL --retry 5 --retry-delay 3 --retry-connrefused -H "User-Agent: gh-actions-llama" \
              "$base/overview/activeAddresses/$1?period=24h" > "data/$2_dau.json" || echo '{}' > "data/$2_dau.json"
            curl -fsSL --retry 5 --retry-delay 3 --retry-connrefused -H "User-Agent: gh-actions-llama" \
              "$base/overview/transactions/$1?period=24h"    > "data/$2_tx.json"  || echo '{}' > "data/$2_tx.json"
            curl -fsSL --retry 5 --retry-delay 3 --retry-connrefused -H "User-Agent: gh-actions-llama" \
              "$base/overview/fees/$1?period=24h"            > "data/$2_fees.json"|| echo '{}' > "data/$2_fees.json"
          }
          fetch_one bitcoin btc
          fetch_one ethereum eth
          fetch_one solana   sol
          fetch_one bsc      bnb

      # ---------- Blockchair（为 TX/DAU & NVT 做辅助兜底；三链：BTC/ETH/BNB） ----------
      - name: Fetch Blockchair stats for BTC/ETH/BNB
        run: |
          # 官方文档： https://blockchair.com/api / https://blockchair.com/api/docs
          curl -fsSL --retry 5 --retry-delay 3 --retry-connrefused "https://api.blockchair.com/bitcoin/stats"              > data/btc_blockchair.json || echo '{}' > data/btc_blockchair.json
          curl -fsSL --retry 5 --retry-delay 3 --retry-connrefused "https://api.blockchair.com/ethereum/stats"             > data/eth_blockchair.json || echo '{}' > data/eth_blockchair.json
          curl -fsSL --retry 5 --retry-delay 3 --retry-connrefused "https://api.blockchair.com/binance-smart-chain/stats"  > data/bnb_blockchair.json || echo '{}' > data/bnb_blockchair.json

          python3 - << 'PY'
          import json
          def rd(p): 
            try: return json.load(open(p))
            except: return {}
          # 结构：{"data": { ... fields ... }}
          def parse(d):
            dd = (d or {}).get("data", {})
            tx  = dd.get("transactions_24h") or dd.get("transactions_24hrs")
            dau = dd.get("addresses_active_24h") or dd.get("active_addresses_24h") # BTC 常见；其他链可能为空
            # NVT 辅助：优先直接给 USD；否则用原生量 * 价格
            usd = None
            for k in ["transaction_volume_usd_24h","transaction_volume_24h_usd","transaction_volume_usd","transfer_volume_usd_24h"]:
              if dd.get(k) is not None:
                usd = float(dd[k]); break
            if usd is None:
              vol = dd.get("transaction_volume_24h") or dd.get("transfer_volume_24h")
              px  = dd.get("market_price_usd") or dd.get("price_usd")
              try:
                if vol is not None and px is not None: usd = float(vol) * float(px)
              except: usd = None
            return {"tx": tx, "dau": dau, "transfer_usd_24h": usd}
          out = {
            "BTC": parse(rd("data/btc_blockchair.json")),
            "ETH": parse(rd("data/eth_blockchair.json")),
            "BNB": parse(rd("data/bnb_blockchair.json")),
          }
          json.dump(out, open("data/blockchair_fallback.json","w"))
          print("wrote data/blockchair_fallback.json")
          PY

      # ---------- CoinMetrics（SOL 的 NVT） ----------
      - name: Fetch CoinMetrics (SOL TxTfrValAdjUSD)
        run: |
          since=$(date -u -d "3 days ago" +%F || date -u -v-3d +%F)
          now=$(date -u +%F)
          curl -fsSL --retry 5 --retry-delay 3 --retry-connrefused \
            "https://community-api.coinmetrics.io/v4/timeseries/asset-metrics?assets=sol&metrics=TxTfrValAdjUSD&start_time=${since}&end_time=${now}" \
            > data/sol_cm.json || echo '{}' > data/sol_cm.json

      # ---------- 合并生成 latest.json（DAU/TX/NVT 多级兜底） ----------
      - name: Build merged latest.json
        run: |
          python3 - << 'PY'
          import json, os

          def j(path, d=None):
            try: return json.load(open(path))
            except: return d

          prev = j("data/latest.json", {})

          # 价格市值（CG）
          cg = j("data/cg.json", [])
          m  = {x.get('id'): x for x in cg}

          # DeFiLlama 指标
          def llama(prefix):
            dau  = j(f"data/{prefix}_dau.json", {})
            tx   = j(f"data/{prefix}_tx.json",  {})
            fees = j(f"data/{prefix}_fees.json",{})
            return {
              "dau": dau.get("total24h") or dau.get("activeAddresses24h"),
              "tx":  tx.get("total24h")  or tx.get("transactions24h"),
              "feesUSD": fees.get("total24h") or fees.get("total24hUSD"),
            }

          # TVL（你已做①；这里按：主源/镜像 -> 上一版缓存）
          tvl_src = j("data/tvl_from_sources.json", {})

          def pick_tvl(sym):
            v = (tvl_src.get(sym) or {}).get("tvl")
            if v: return v
            pv = (prev.get(sym) or {}).get("tvl")
            return pv

          # Blockchair 兜底（TX/DAU/NVT for BTC/ETH/BNB）
          bc = j("data/blockchair_fallback.json", {})

          def dau_tx(sym, llama_obj):
            # 优先 Llama；再 Blockchair；最后上一版缓存
            d = llama_obj.get("dau") or ( (bc.get(sym) or {}).get("dau") ) or ( (prev.get(sym) or {}).get("dau") )
            t = llama_obj.get("tx")  or ( (bc.get(sym) or {}).get("tx")  ) or ( (prev.get(sym) or {}).get("tx")  )
            return d, t

          def nvt_transfer(sym):
            # NVT 的 24h 链上转账额（USD）
            if sym in ("BTC","ETH","BNB"):
              v = (bc.get(sym) or {}).get("transfer_usd_24h")
              if v: return v
              return (prev.get(sym) or {}).get("onchain_tx_value_usd_24h")
            if sym=="SOL":
              # CoinMetrics
              data = (j("data/sol_cm.json", {}) or {}).get("data") or []
              if data:
                data.sort(key=lambda r: r.get("time",""))
                last = data[-1]
                try:
                  v = float(last.get("TxTfrValAdjUSD")) if last.get("TxTfrValAdjUSD") else None
                except: v = None
                if v: return v
              return (prev.get("SOL") or {}).get("onchain_tx_value_usd_24h")

          # 组装
          sym_map = {
            "BTC": ("bitcoin","btc"),
            "ETH": ("ethereum","eth"),
            "SOL": ("solana","sol"),
            "BNB": ("binancecoin","bnb"),
          }

          out = {}
          for sym,(cid,prefix) in sym_map.items():
            llama_obj = llama(prefix)
            dau_v, tx_v = dau_tx(sym, llama_obj)
            out[sym] = {
              **(m.get(cid) or {}),
              **llama_obj,
              "dau": dau_v,
              "tx":  tx_v,
              "tvl": pick_tvl(sym),
              "onchain_tx_value_usd_24h": nvt_transfer(sym),
            }

          os.makedirs("data", exist_ok=True)
          json.dump(out, open("data/latest.json","w"))
          print("Wrote data/latest.json")
          PY

      - name: Commit & push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add data/latest.json data/tvl_from_sources.json data/blockchair_fallback.json || true
          git commit -m "feat: robust DAU/TX/NVT with Blockchair fallback + TVL mirrors" || echo "no changes"
          git push || true
