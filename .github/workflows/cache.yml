name: Cache crypto data (no-key NVT)

on:
  schedule:
    - cron: "0 */4 * * *"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare folders
        run: mkdir -p data

      - name: Fetch CoinGecko markets
        run: |
          curl -fsSL --retry 5 --retry-delay 3 --retry-connrefused \
            "https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=bitcoin,ethereum,solana,binancecoin&precision=full" \
            > data/cg.json || echo "[]" > data/cg.json

      # ===== TVL：主源 v2/chains + jsDelivr 镜像兜底 =====
      - name: Fetch DeFiLlama TVL (single call) + mirror fallback
        run: |
          set -e
          ok=0
          if curl -fsSL --retry 5 --retry-delay 3 --retry-connrefused \
               -H "User-Agent: gh-actions-llama" \
               "https://api.llama.fi/v2/chains" > data/chains_all.json; then
            ok=1
          fi
          if [ $ok -eq 0 ]; then
            echo "primary failed, using jsDelivr mirror..."
            curl -fsSL --retry 5 --retry-delay 3 --retry-connrefused \
              -H "User-Agent: gh-actions-llama" \
              "https://cdn.jsdelivr.net/gh/DefiLlama/defillama-datasets@master/chainTvls.json" \
              > data/chainTvls_mirror.json || echo "{}" > data/chainTvls_mirror.json
          fi

          python3 - << 'PY'
          import json, os
          name_map = {'bitcoin':'Bitcoin','ethereum':'Ethereum','solana':'Solana','bsc':'BSC'}
          tvl_map = {}
          # 优先解析 v2/chains
          p1 = "data/chains_all.json"
          if os.path.exists(p1):
            try:
              arr = json.load(open(p1))
              tvl_map = {c.get("name"): c.get("tvl") for c in arr if isinstance(c, dict)}
            except: pass
          # 主源为空则解析镜像
          if not tvl_map:
            p2 = "data/chainTvls_mirror.json"
            try:
              m = json.load(open(p2))
              for k,v in (m or {}).items():
                if isinstance(v, dict) and "tvl" in v: tvl_map[k] = v.get("tvl")
                elif isinstance(v, (int,float)): tvl_map[k] = v
            except: pass
          out = {
            "BTC": {"tvl": tvl_map.get(name_map['bitcoin'])},
            "ETH": {"tvl": tvl_map.get(name_map['ethereum'])},
            "SOL": {"tvl": tvl_map.get(name_map['solana'])},
            "BNB": {"tvl": tvl_map.get(name_map['bsc'])},
          }
          os.makedirs("data", exist_ok=True)
          json.dump(out, open("data/tvl_from_sources.json","w"))
          print("wrote data/tvl_from_sources.json")
          PY

      # ===== 其余链上指标：加重试 + 失败写空 =====
      - name: Fetch DeFiLlama chain actives/tx/fees
        run: |
          fetch_one(){ # $1=chain $2=prefix
            base="https://api.llama.fi"
            curl -fsSL --retry 5 --retry-delay 3 --retry-connrefused -H "User-Agent: gh-actions-llama" \
              "$base/overview/activeAddresses/$1?period=24h" > "data/$2_dau.json" || echo '{}' > "data/$2_dau.json"
            curl -fsSL --retry 5 --retry-delay 3 --retry-connrefused -H "User-Agent: gh-actions-llama" \
              "$base/overview/transactions/$1?period=24h"    > "data/$2_tx.json"  || echo '{}' > "data/$2_tx.json"
            curl -fsSL --retry 5 --retry-delay 3 --retry-connrefused -H "User-Agent: gh-actions-llama" \
              "$base/overview/fees/$1?period=24h"            > "data/$2_fees.json"|| echo '{}' > "data/$2_fees.json"
          }
          fetch_one bitcoin btc
          fetch_one ethereum eth
          fetch_one solana   sol
          fetch_one bsc      bnb

      # ===== NVT（无 Key）来源 =====
      - name: Fetch NVT sources (no key)
        run: |
          curl -fsSL --retry 5 --retry-delay 3 --retry-connrefused \
            "https://api.blockchair.com/bitcoin/stats"             > data/btc_blockchair.json || echo '{}' > data/btc_blockchair.json
          curl -fsSL --retry 5 --retry-delay 3 --retry-connrefused \
            "https://api.blockchair.com/ethereum/stats"            > data/eth_blockchair.json || echo '{}' > data/eth_blockchair.json
          curl -fsSL --retry 5 --retry-delay 3 --retry-connrefused \
            "https://api.blockchair.com/binance-smart-chain/stats" > data/bnb_blockchair.json || echo '{}' > data/bnb_blockchair.json

          since=$(date -u -d "3 days ago" +%F || date -u -v-3d +%F)
          now=$(date -u +%F)
          curl -fsSL --retry 5 --retry-delay 3 --retry-connrefused \
            "https://community-api.coinmetrics.io/v4/timeseries/asset-metrics?assets=sol&metrics=TxTfrValAdjUSD&start_time=${since}&end_time=${now}" \
            > data/sol_cm.json || echo '{}' > data/sol_cm.json

      # ===== 合并：TVL 优先用 tvl_from_sources -> 旧缓存 =====
      - name: Build merged latest.json
        run: |
          python3 - << 'PY'
          import json, os

          def j(path, d=None):
            try: return json.load(open(path))
            except: return d

          prev = j("data/latest.json", {})

          cg = j("data/cg.json", [])
          m  = {x.get('id'): x for x in cg}

          def llama(prefix):
            dau  = j(f"data/{prefix}_dau.json", {})
            tx   = j(f"data/{prefix}_tx.json",  {})
            fees = j(f"data/{prefix}_fees.json",{})
            return {
              "dau": dau.get("total24h") or dau.get("activeAddresses24h"),
              "tx":  tx.get("total24h")  or tx.get("transactions24h"),
              "feesUSD": fees.get("total24h") or fees.get("total24hUSD"),
            }

          tvl_src = j("data/tvl_from_sources.json", {})

          def pick_tvl(sym):
            v = (tvl_src.get(sym) or {}).get("tvl")
            if v: return v
            pv = (prev.get(sym) or {}).get("tvl")
            return pv

          def blockchair_value(path):
            d = (j(path, {}) or {}).get("data", {})
            for k in ["transaction_volume_usd_24h","transaction_volume_24h_usd","transaction_volume_usd","transfer_volume_usd_24h"]:
              v = d.get(k)
              if v: return float(v)
            vol_native = d.get("transaction_volume_24h") or d.get("transfer_volume_24h")
            price_usd  = d.get("market_price_usd") or d.get("price_usd")
            try:
              if vol_native and price_usd:
                return float(vol_native) * float(price_usd)
            except: pass
            return None

          btc_val = blockchair_value("data/btc_blockchair.json") or (prev.get("BTC") or {}).get("onchain_tx_value_usd_24h")
          eth_val = blockchair_value("data/eth_blockchair.json") or (prev.get("ETH") or {}).get("onchain_tx_value_usd_24h")
          bnb_val = blockchair_value("data/bnb_blockchair.json") or (prev.get("BNB") or {}).get("onchain_tx_value_usd_24h")

          # CoinMetrics（SOL）
          sol_val = None
          rows = (j("data/sol_cm.json", {}) or {}).get("data") or []
          if rows:
            rows.sort(key=lambda r: r.get("time",""))
            last = rows[-1]
            v = last.get("TxTfrValAdjUSD")
            try: sol_val = float(v) if v else None
            except: sol_val = None
          if not sol_val:
            sol_val = (prev.get("SOL") or {}).get("onchain_tx_value_usd_24h")

          out = {
            "BTC": {
              **(m.get("bitcoin") or {}),
              **llama("btc"),
              "tvl": pick_tvl("BTC"),
              "onchain_tx_value_usd_24h": btc_val
            },
            "ETH": {
              **(m.get("ethereum") or {}),
              **llama("eth"),
              "tvl": pick_tvl("ETH"),
              "onchain_tx_value_usd_24h": eth_val
            },
            "SOL": {
              **(m.get("solana") or {}),
              **llama("sol"),
              "tvl": pick_tvl("SOL"),
              "onchain_tx_value_usd_24h": sol_val
            },
            "BNB": {
              **(m.get("binancecoin") or {}),
              **llama("bnb"),
              "tvl": pick_tvl("BNB"),
              "onchain_tx_value_usd_24h": bnb_val
            },
          }

          os.makedirs("data", exist_ok=True)
          json.dump(out, open("data/latest.json","w"))
          print("Wrote data/latest.json")
          PY

      - name: Commit & push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add data/latest.json data/tvl_from_sources.json || true
          git commit -m "chore: refresh data cache via v2/chains + mirror (robust)" || echo "no changes"
          git push || true
